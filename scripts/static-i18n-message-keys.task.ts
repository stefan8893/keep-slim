import { promises as fs } from 'fs';

import defaultMessages from '../src/i18n/resources/de.json';

const messages = defaultMessages as Record<string, object | string>;

function findInMessages(
  transl: Record<string, object | string>,
  key: string,
): Record<string, object | string> | undefined {
  if (typeof transl !== 'object') return undefined;

  if (transl.hasOwnProperty(key)) return transl[key] as Record<string, object | string>;

  for (const t in transl) {
    if (transl.hasOwnProperty(t) && typeof transl[t] === 'object')
      return findInMessages(transl[t] as Record<string, object | string>, key);
  }

  return undefined;
}

function generateEntry(transl: Record<string, object | string>, key: string): string {
  if (!key) return '';

  const currentItem = findInMessages(transl, key);

  if (!currentItem) {
    return '';
  }

  if (typeof currentItem === 'string') return `${key}: '${key}',`;

  if (typeof currentItem !== 'object') return '';

  const nested = Object.keys(currentItem)
    .filter((x) => currentItem.hasOwnProperty(x))
    .map((x) => generateEntry(currentItem, x))
    .join('');

  return `${key}: { ${nested} },`;
}

export async function generateI18nMessageKeys(): Promise<void> {
  const targetFile = './src/i18n/message-keys.g.ts';

  console.log('Using source file: ./src/i18n/de.json');
  console.log('Using target file: ' + targetFile);

  console.log('Generating message keys ...');
  const properties = Object.keys(messages)
    .map((x) => generateEntry(messages, x))
    .join('\n\t');

  const messageKeys = `//----------------------
// <auto-generated>
//     Generated using my buggy toolchain - see: scripts/pre-build-tasks
// </auto-generated>
//----------------------

export const MessageKey = {\n\t${properties}\n};`;

  console.log(`Write message keys to file: ${targetFile}`);
  await fs.writeFile(targetFile, messageKeys);
  console.log('message-keys.g.ts successfully created');
}
